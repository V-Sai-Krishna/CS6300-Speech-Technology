{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CS6300 Final Project","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"hbLTu2WmPapy","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1594793880304,"user_tz":-330,"elapsed":4226,"user":{"displayName":"ee17b035 ee17b035","photoUrl":"","userId":"05467978821606295988"}},"outputId":"9b20b776-3bd4-41c8-e455-bc333bcddd45"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import torch\n","import torchvision\n","import torchvision.datasets as datasets\n","import torchvision.transforms as transforms\n","from torch import nn\n","import os\n","from sklearn.manifold import TSNE\n","import seaborn as sns"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"XpF5Fpt4XrQ5","colab_type":"code","colab":{}},"source":["class Encoder(nn.Module):\n","  def __init__(self,hs):\n","    super(Encoder, self).__init__()\n","    self.input_size = 38\n","    self.hidden_size = hs\n","    self.encoder = nn.LSTM(self.input_size,self.hidden_size)\n","\n","  def forward(self,x):\n","      hiddenstate=torch.zeros(1,x.size(1),self.hidden_size)\n","      cellstate=torch.zeros(1,x.size(1),self.hidden_size)\n","      eout,(hs,cs)=self.encoder(x,(hiddenstate,cellstate))\n","      return hs,cs"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NMoj54HkcetF","colab_type":"code","colab":{}},"source":["class Decoder(nn.Module):\n","  def __init__(self,hs):\n","    super(Decoder, self).__init__()\n","    self.input_size = 38\n","    self.hidden_size = hs\n","    self.decoder=nn.LSTM(self.input_size,self.hidden_size)\n","    self.linlayer=nn.Sequential(nn.Linear(self.hidden_size,38))\n","\n","  def forward(self,x,hs,cs):\n","    dout,(hs,cs)=self.decoder(x,(hs,cs))\n","    dout=dout.reshape(1,self.hidden_size)\n","    out=self.linlayer(dout)\n","    return out,hs,cs  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KIkeaas4H8qf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":124},"executionInfo":{"status":"ok","timestamp":1594793974996,"user_tz":-330,"elapsed":23130,"user":{"displayName":"ee17b035 ee17b035","photoUrl":"","userId":"05467978821606295988"}},"outputId":"2966f093-08ff-4ee7-f73a-72bd8c673194"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IOQSnNlZLn5n","colab_type":"code","colab":{}},"source":["folders=['1','2','3','4','5','6','7','8','9','o','z']\n","mfiles=[]\n","labels_list=[]\n","path=\"/content/drive/My Drive/Isolated_Digits/\"\n","for fol in range(len(folders)):\n","  nfp=path+folders[fol]+\"/train\"\n","  for file in os.listdir(nfp):\n","    if(file[-5:]==\".mfcc\"):\n","      mfiles.append(nfp+\"/\"+file)\n","      labels_list.append(int(fol))\n","labels=torch.FloatTensor(labels_list)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yQoarFZ8r97Z","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":556},"executionInfo":{"status":"ok","timestamp":1594796966706,"user_tz":-330,"elapsed":2887231,"user":{"displayName":"ee17b035 ee17b035","photoUrl":"","userId":"05467978821606295988"}},"outputId":"882dcada-569a-4219-d221-7f51b5ad2abf"},"source":["LearningRate=0.0001 \n","epochs=15  \n","hiddensize=512 \n","encode=Encoder(hiddensize) \n","decode=Decoder(hiddensize) \n","forced_teacher = 0.5 \n","encoder_optimizer = torch.optim.Adam(encode.parameters(), lr=LearningRate) \n","decoder_optimizer = torch.optim.Adam(decode.parameters(), lr=LearningRate) \n","criterion = nn.MSELoss()\n","\n","trainingloss_list = []\n","\n","for epoch in range(epochs): \n","  for npath in mfiles: \n","    f = open(npath,'r') \n","    lines=f.readlines() \n","    rc=(lines[0].strip()).split(\" \")\n","    arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","    for i in range(int(rc[1])):\n","      arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","    hs,cs = encode(arr)\n"," \n","    decoderinput=torch.zeros(1,1,38)\n","    loss=0\n","    for i in range(int(rc[1])):\n","      decoderinput,hs,cs = decode(decoderinput,hs[:,-1,:].reshape(1,1,hiddensize),cs[:,-1,:].reshape(1,1,hiddensize))\n","      loss += criterion(decoderinput.reshape(1,38), arr[0,i].reshape(1,38))\n","      teach=np.random.rand(1)\n","      if (teach<forced_teacher):\n","        decoderinput=decoderinput.reshape(1,1,38)\n","      else:\n","        decoderinput=arr[0,i].reshape(1,1,38)\n","    \n","    trainingloss_list.append(loss.item()/int(rc[1]))\n","    encoder_optimizer.zero_grad()\n","    decoder_optimizer.zero_grad()\n","    loss.backward()\n","    encoder_optimizer.step()\n","    decoder_optimizer.step()\n","\n","  print('Epoch',epoch+1,'out of',epochs,'epochs are over') \n","\n","plt.figure(1)\n","xtrainloss=np.arange(len(trainingloss_list))\n","plt.plot(xtrainloss,trainingloss_list)\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Training Loss')\n","plt.title('Training Loss vs Iterations')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1 out of 15 epochs are over\n","Epoch 2 out of 15 epochs are over\n","Epoch 3 out of 15 epochs are over\n","Epoch 4 out of 15 epochs are over\n","Epoch 5 out of 15 epochs are over\n","Epoch 6 out of 15 epochs are over\n","Epoch 7 out of 15 epochs are over\n","Epoch 8 out of 15 epochs are over\n","Epoch 9 out of 15 epochs are over\n","Epoch 10 out of 15 epochs are over\n","Epoch 11 out of 15 epochs are over\n","Epoch 12 out of 15 epochs are over\n","Epoch 13 out of 15 epochs are over\n","Epoch 14 out of 15 epochs are over\n","Epoch 15 out of 15 epochs are over\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ldyLKDKfUwdQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1594797286682,"user_tz":-330,"elapsed":1300,"user":{"displayName":"ee17b035 ee17b035","photoUrl":"","userId":"05467978821606295988"}},"outputId":"1f243549-0fa6-4820-a78a-ec407cc4ef2f"},"source":["plt.figure(1)\n","xtrainloss=np.arange(len(trainingloss_list[500:]))\n","plt.plot(xtrainloss,trainingloss_list[500:])\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Training Loss')\n","plt.title('Training Loss vs Iterations')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"JVBhERy5GcbR","colab_type":"code","colab":{}},"source":["class ANN2(nn.Module):\n","  def __init__(self):\n","    super(ANN2, self).__init__()\n","    self.ann=nn.Sequential(nn.Linear(1024,64),\n","                            nn.Tanh(),\n","                            nn.Linear(64,11))\n","\n","  def forward(self,x):\n","    out=self.ann(x)\n","    return out.reshape(len(x),len(folders))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KT_L-PLsu8pi","colab_type":"code","colab":{}},"source":["class ANN3(nn.Module):\n","  def __init__(self):\n","    super(ANN3, self).__init__()\n","    self.ann=nn.Sequential(nn.Linear(1024,256),\n","                            nn.Tanh(),\n","                            #nn.Dropout(0.2),\n","                            nn.Linear(256,64),\n","                            nn.Tanh(),\n","                            #nn.Dropout(0.2),\n","                            nn.Linear(64,11))\n","\n","  def forward(self,x):\n","    out=self.ann(x)\n","    return out.reshape(len(x),len(folders))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-nN2Qx2r4R7I","colab_type":"code","colab":{}},"source":["class ANN5(nn.Module):\n","  def __init__(self):\n","    super(ANN5, self).__init__()\n","    self.ann=nn.Sequential(nn.Linear(1024,512),\n","                            nn.ReLU(),\n","                            nn.Linear(512,256),\n","                            nn.ReLU(),\n","                            nn.Linear(256,128),\n","                            nn.ReLU(),\n","                            nn.Linear(128,64),\n","                            nn.ReLU(),\n","                            nn.Linear(64,11))\n","\n","  def forward(self,x):\n","    out=self.ann(x)\n","    return out.reshape(len(x),len(folders))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uWfgljT65soQ","colab_type":"code","colab":{}},"source":["randindex=np.random.randint(0,len(labels),(len(labels)))\n","randlabels=labels[randindex].type(torch.LongTensor)\n","context_vectors=torch.zeros(len(labels),2*hiddensize)\n","\n","for randi in range(len(randindex)):\n","  f = open(mfiles[randindex[randi]],'r')\n","  lines=f.readlines()\n","  rc=(lines[0].strip()).split(\" \")\n","  \n","  arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","  for i in range(int(rc[1])):\n","    arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","  hs,cs = encode(arr)\n","  context_vectors[randi,:hiddensize]=hs[:,-1,:].detach().reshape(hiddensize)\n","  context_vectors[randi,hiddensize:]=cs[:,-1,:].detach().reshape(hiddensize)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KT4WnHIKMsrM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1594797559254,"user_tz":-330,"elapsed":3346,"user":{"displayName":"ee17b035 ee17b035","photoUrl":"","userId":"05467978821606295988"}},"outputId":"ca57cd83-6284-42eb-b227-a7f546266296"},"source":["LearningRate=0.01\n","epochs=400\n","ann = ANN2()\n","ann_optimizer = torch.optim.Adam(ann.parameters(), lr=LearningRate)\n","ann_criterion = nn.CrossEntropyLoss()\n","ann_trainingloss_list = []\n","ann_accuracy = []\n","for epoch in range(epochs):\n","  prediction=ann(context_vectors)\n","  ann_loss=ann_criterion(prediction,randlabels)#+0.05*(torch.norm(ann.ann[0].weight)+torch.norm(ann.ann[2].weight)+torch.norm(ann.ann[4].weight)+torch.norm(ann.ann[6].weight)+torch.norm(ann.ann[8].weight))#+torch.norm(ann.ann[10].weight)+torch.norm(ann.ann[12].weight))\n","  _, predicted = torch.max(prediction.data, 1)\n","  ann_accuracy.append((predicted == randlabels).sum().item()*100/len(randlabels))\n","  ann_trainingloss_list.append(ann_loss.item())\n","  ann_optimizer.zero_grad()\n","  ann_loss.backward()\n","  ann_optimizer.step()\n","\n","plt.figure(1)\n","xtrainloss=np.arange(len(ann_trainingloss_list))\n","plt.plot(xtrainloss,ann_trainingloss_list)\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Training Loss')\n","plt.title('Training Loss vs Iterations')\n","plt.show()\n","\n","plt.figure(2)\n","xtrainloss=np.arange(len(ann_accuracy))\n","plt.plot(xtrainloss,ann_accuracy)\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Accuracy')\n","plt.title('Accuracy vs Iterations')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"E4vcrKjiSMe3","colab_type":"code","colab":{}},"source":["testpath=\"/content/drive/My Drive/Isolated_Digits/\"\n","testfiles=[]\n","testlabels_list=[]\n","for fol in range(len(folders)):\n","  nfp=path+folders[fol]+\"/dev\"\n","  for file in os.listdir(nfp):\n","    if(file[-5:]==\".mfcc\"):\n","      testfiles.append(nfp+\"/\"+file)\n","      testlabels_list.append(int(fol))\n","testlabels=torch.FloatTensor(testlabels_list)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1bmK4jF18YWr","colab_type":"code","colab":{}},"source":["testcontext_vectors=torch.zeros(len(testlabels),2*hiddensize)\n","for tfile in range(len(testfiles)):\n","  f = open(testfiles[tfile],'r')\n","  lines=f.readlines()\n","  rc=(lines[0].strip()).split(\" \")\n","  \n","  arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","  for i in range(int(rc[1])):\n","    arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","  hs,cs = encode(arr)\n","  testcontext_vectors[tfile,:hiddensize]=hs[:,-1,:].detach().reshape(hiddensize)\n","  testcontext_vectors[tfile,hiddensize:]=cs[:,-1,:].detach().reshape(hiddensize)\n","\n","prediction=ann(testcontext_vectors)\n","_, predicted = torch.max(prediction.data, 1)\n","accuracy=((predicted == testlabels).sum().item()*100/len(testlabels))\n","print(accuracy)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xyL6fhf18DW8","colab_type":"code","colab":{}},"source":["i=1\n","input=testcontext_vectors\n","for a in ann.ann.children():\n","  output=a(input).detach()\n","  if(i%2==1):\n","    poutput= TSNE(n_components=2).fit_transform(output)\n","    plt.figure(int(i/2)+1)\n","    sns.scatterplot(poutput[:,0], poutput[:,1], hue=testlabels, legend='full',palette=['red','blue','green','yellow','pink','black','orange','brown','dodgerblue','violet','cyan'])\n","    plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","    plt.minorticks_on()\n","    plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","    plt.xlabel('Iterations')\n","    plt.ylabel('Accuracy')\n","    title=\"Layer \"+str(int(i/2)+1)\n","    plt.title(title)\n","    plt.show()\n","  input=output\n","  i+=1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DneT44tcsOTA","colab_type":"text"},"source":["With Attention"]},{"cell_type":"code","metadata":{"id":"2cwaObu90MBo","colab_type":"code","colab":{}},"source":["LearningRate=0.003 \n","epochs=15 \n","hiddensize=512 \n","encode=Encoder(hiddensize) \n","decode=Decoder(hiddensize) \n","forced_teacher = 0.5 \n","encoder_optimizer = torch.optim.Adam(encode.parameters(), lr=LearningRate) \n","decoder_optimizer = torch.optim.Adam(decode.parameters(), lr=LearningRate) \n","criterion = nn.MSELoss()\n","css=torch.nn.CosineSimilarity(0)\n","trainingloss_list = []\n","\n","for epoch in range(epochs): \n","  for npath in mfiles: \n","    f = open(npath,'r') \n","    lines=f.readlines() \n","    rc=(lines[0].strip()).split(\" \")\n","    arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","    for i in range(int(rc[1])):\n","      arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","    hs,cs = encode(arr) \n","    hd=hs[:,-1,:].reshape(512)\n","    cd=cs[:,-1,:].reshape(512)\n","    \n","    decoderinput=torch.zeros(1,1,38)\n","    loss=0\n","    for i in range(int(rc[1])):\n","\n","      beta=torch.zeros(hs.size(1))\n","      for i in range(hs.size(1)):\n","        beta[i]=css(hs[0,i].reshape(512),hd)\n","      alpha=torch.exp(beta)/sum(torch.exp(beta))\n","      hct=torch.zeros(hiddensize)\n","      for i in range(hs.size(1)):\n","        hct+=alpha[i]*hs[:,i,:].reshape(hiddensize)\n","\n","      beta=torch.zeros(cs.size(1))\n","      for i in range(cs.size(1)):\n","        beta[i]=css(cs[0,i].reshape(512),cd)\n","      alpha=torch.exp(beta)/sum(torch.exp(beta))\n","      cct=torch.zeros(hiddensize)\n","      for i in range(cs.size(1)):\n","        cct+=alpha[i]*cs[:,i,:].reshape(hiddensize)\n","\n","      decoderinput,hs,cs = decode(decoderinput,hct.reshape(1,1,hiddensize),cct.reshape(1,1,hiddensize))\n","      hd=hs[:,-1,:].reshape(512)\n","      cd=cs[:,-1,:].reshape(512)\n","      loss += criterion(decoderinput.reshape(1,38), arr[0,i].reshape(1,38))\n","      teach=np.random.rand(1)\n","      if (teach<forced_teacher):\n","        decoderinput=decoderinput.reshape(1,1,38)\n","      else:\n","        decoderinput=arr[0,i].reshape(1,1,38)\n","    \n","    trainingloss_list.append(loss.item()/int(rc[1]))\n","    encoder_optimizer.zero_grad()\n","    decoder_optimizer.zero_grad()\n","    loss.backward()\n","    encoder_optimizer.step()\n","    decoder_optimizer.step()\n","\n","  print('Epoch',epoch+1,'out of',epochs,'epochs are over') \n","\n","plt.figure(1)\n","xtrainloss=np.arange(len(trainingloss_list))\n","plt.plot(xtrainloss,trainingloss_list)\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Training Loss')\n","plt.title('Training Loss vs Iterations')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s_RThswSK8Ex","colab_type":"code","colab":{}},"source":["randindex=np.random.randint(0,len(labels),(len(labels)))\n","randlabels=labels[randindex].type(torch.LongTensor)\n","context_vectors=torch.zeros(len(labels),2*hiddensize)\n","\n","for randi in range(len(randindex)):\n","  f = open(mfiles[randindex[randi]],'r')\n","  lines=f.readlines()\n","  rc=(lines[0].strip()).split(\" \")\n","  \n","  arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","  for i in range(int(rc[1])):\n","    arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","  hs,cs = encode(arr)\n","\n","  hd=hs[:,-1,:].reshape(512)\n","  cd=cs[:,-1,:].reshape(512)\n","  \n","  beta=torch.zeros(hs.size(1))\n","  for i in range(hs.size(1)):\n","    beta[i]=css(hs[0,i].reshape(512),hd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  hct=torch.zeros(hiddensize)\n","  for i in range(hs.size(1)):\n","    hct+=alpha[i]*hs[:,i,:].reshape(hiddensize)\n","\n","  beta=torch.zeros(cs.size(1))\n","  for i in range(cs.size(1)):\n","    beta[i]=css(cs[0,i].reshape(512),cd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  cct=torch.zeros(hiddensize)\n","  for i in range(cs.size(1)):\n","    cct+=alpha[i]*cs[:,i,:].reshape(512)\n","\n","  context_vectors[randi,:hiddensize]=hct.detach().reshape(hiddensize)\n","  context_vectors[randi,hiddensize:]=cct.detach().reshape(hiddensize)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tS-_XHDdMsvj","colab_type":"code","colab":{}},"source":["LearningRate=0.003\n","epochs=100\n","ann = ANN5()\n","ann_optimizer = torch.optim.Adam(ann.parameters(), lr=LearningRate)\n","ann_criterion = nn.CrossEntropyLoss()\n","ann_trainingloss_list = []\n","ann_accuracy = []\n","for epoch in range(epochs):\n","  prediction=ann(context_vectors)\n","  ann_loss=ann_criterion(prediction,randlabels)\n","  _, predicted = torch.max(prediction.data, 1)\n","  ann_accuracy.append((predicted == randlabels).sum().item()*100/len(randlabels))\n","  ann_trainingloss_list.append(loss.item())\n","  ann_optimizer.zero_grad()\n","  ann_loss.backward()\n","  ann_optimizer.step()\n","\n","plt.figure(1)\n","xtrainloss=np.arange(len(ann_accuracy))\n","plt.plot(xtrainloss,ann_accuracy)\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Training Loss')\n","plt.title('Training Loss vs Iterations')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"__k1blCXecQG","colab_type":"code","colab":{}},"source":["testpath=\"/content/drive/My Drive/Isolated_Digits/\"\n","testfiles=[]\n","testlabels_list=[]\n","for fol in range(len(folders)):\n","  nfp=path+folders[fol]+\"/dev\"\n","  for file in os.listdir(nfp):\n","    if(file[-5:]==\".mfcc\"):\n","      testfiles.append(nfp+\"/\"+file)\n","      testlabels_list.append(int(fol))\n","testlabels=torch.FloatTensor(testlabels_list)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"F-18GzkSekqM","colab_type":"code","colab":{}},"source":["testcontext_vectors=torch.zeros(len(testlabels),2*hiddensize)\n","for tfile in range(len(testfiles)):\n","  f = open(testfiles[tfile],'r')\n","  lines=f.readlines()\n","  rc=(lines[0].strip()).split(\" \")\n","  \n","  arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","  for i in range(int(rc[1])):\n","    arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","  hs,cs = encode(arr)\n","  hd=hs[:,-1,:].reshape(512)\n","  cd=cs[:,-1,:].reshape(512)\n","  \n","  beta=torch.zeros(hs.size(1))\n","  for i in range(hs.size(1)):\n","    beta[i]=css(hs[0,i].reshape(512),hd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  hct=torch.zeros(hiddensize)\n","  for i in range(hs.size(1)):\n","    hct+=alpha[i]*hs[:,i,:].reshape(hiddensize)\n","\n","  beta=torch.zeros(cs.size(1))\n","  for i in range(cs.size(1)):\n","    beta[i]=css(cs[0,i].reshape(512),cd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  cct=torch.zeros(hiddensize)\n","  for i in range(cs.size(1)):\n","    cct+=alpha[i]*cs[:,i,:].reshape(512)\n","\n","  testcontext_vectors[tfile,:hiddensize]=hct.detach().reshape(hiddensize)\n","  testcontext_vectors[tfile,hiddensize:]=cct.detach().reshape(hiddensize)\n","\n","prediction=ann(testcontext_vectors)\n","_, predicted = torch.max(prediction.data, 1)\n","accuracy=((predicted == testlabels).sum().item()*100/len(testlabels))\n","print(accuracy)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EqpHSO2Kda-c","colab_type":"code","colab":{}},"source":["i=1\n","input=testcontext_vectors\n","hues=[folders[int(i)] for i in testlabels] \n","plt.figure(1)\n","fig,ax = plt.subplots(1,5,figsize=(25,5))\n","for a in ann.ann.children():\n","  output=a(input).detach()\n","  if(i%2==1):\n","    poutput= TSNE(n_components=2).fit_transform(output)\n","    ax=plt.subplot(1,5,int(i/2)+1)\n","    sns.scatterplot(poutput[:,0], poutput[:,1], hue=hues, legend='full',palette=['red','blue','green','yellow','pink','black','orange','brown','dodgerblue','violet','cyan'])\n","    plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","    plt.minorticks_on()\n","    plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","    title=\"t-SNE plot of Layer \"+str(int(i/2)+1)\n","    plt.title(title)\n","  input=output\n","  i+=1\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vSUZbk41fSts","colab_type":"code","colab":{}},"source":["LearningRate=0.003\n","epochs=100\n","ann = ANN4()\n","ann_optimizer = torch.optim.Adam(ann.parameters(), lr=LearningRate)\n","ann_criterion = nn.CrossEntropyLoss()\n","ann_trainingloss_list = []\n","ann_accuracy = []\n","for epoch in range(epochs):\n","  prediction=ann(context_vectors)\n","  ann_loss=ann_criterion(prediction,randlabels)\n","  _, predicted = torch.max(prediction.data, 1)\n","  ann_accuracy.append((predicted == randlabels).sum().item()*100/len(randlabels))\n","  ann_trainingloss_list.append(loss.item())\n","  ann_optimizer.zero_grad()\n","  ann_loss.backward()\n","  ann_optimizer.step()\n","\n","plt.figure(1)\n","xtrainloss=np.arange(len(ann_accuracy))\n","plt.plot(xtrainloss,ann_accuracy)\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Training Loss')\n","plt.title('Training Loss vs Iterations')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ylvVFJuffSrY","colab_type":"code","colab":{}},"source":["testcontext_vectors=torch.zeros(len(testlabels),2*hiddensize)\n","for tfile in range(len(testfiles)):\n","  f = open(testfiles[tfile],'r')\n","  lines=f.readlines()\n","  rc=(lines[0].strip()).split(\" \")\n","  \n","  arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","  for i in range(int(rc[1])):\n","    arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","  hs,cs = encode(arr)\n","  hd=hs[:,-1,:].reshape(512)\n","  cd=cs[:,-1,:].reshape(512)\n","  \n","  beta=torch.zeros(hs.size(1))\n","  for i in range(hs.size(1)):\n","    beta[i]=css(hs[0,i].reshape(512),hd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  hct=torch.zeros(hiddensize)\n","  for i in range(hs.size(1)):\n","    hct+=alpha[i]*hs[:,i,:].reshape(hiddensize)\n","\n","  beta=torch.zeros(cs.size(1))\n","  for i in range(cs.size(1)):\n","    beta[i]=css(cs[0,i].reshape(512),cd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  cct=torch.zeros(hiddensize)\n","  for i in range(cs.size(1)):\n","    cct+=alpha[i]*cs[:,i,:].reshape(512)\n","\n","  testcontext_vectors[tfile,:hiddensize]=hct.detach().reshape(hiddensize)\n","  testcontext_vectors[tfile,hiddensize:]=cct.detach().reshape(hiddensize)\n","\n","prediction=ann(testcontext_vectors)\n","_, predicted = torch.max(prediction.data, 1)\n","accuracy=((predicted == testlabels).sum().item()*100/len(testlabels))\n","print(accuracy)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WqT7-z9TfSog","colab_type":"code","colab":{}},"source":["i=1\n","input=testcontext_vectors\n","hues=[folders[int(i)] for i in testlabels] \n","plt.figure(1)\n","fig,ax = plt.subplots(1,5,figsize=(25,5))\n","for a in ann.ann.children():\n","  output=a(input).detach()\n","  if(i%2==1):\n","    poutput= TSNE(n_components=2).fit_transform(output)\n","    ax=plt.subplot(1,5,int(i/2)+1)\n","    sns.scatterplot(poutput[:,0], poutput[:,1], hue=hues, legend='full',palette=['red','blue','green','yellow','pink','black','orange','brown','dodgerblue','violet','cyan'])\n","    plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","    plt.minorticks_on()\n","    plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","    title=\"t-SNE plot of Layer \"+str(int(i/2)+1)\n","    plt.title(title)\n","  input=output\n","  i+=1\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9t9E5n3bfSjJ","colab_type":"code","colab":{}},"source":["LearningRate=0.003\n","epochs=200\n","ann = ANN3()\n","ann_optimizer = torch.optim.Adam(ann.parameters(), lr=LearningRate)\n","ann_criterion = nn.CrossEntropyLoss()\n","ann_trainingloss_list = []\n","ann_accuracy = []\n","for epoch in range(epochs):\n","  prediction=ann(context_vectors)\n","  ann_loss=ann_criterion(prediction,randlabels)\n","  _, predicted = torch.max(prediction.data, 1)\n","  ann_accuracy.append((predicted == randlabels).sum().item()*100/len(randlabels))\n","  ann_trainingloss_list.append(loss.item())\n","  ann_optimizer.zero_grad()\n","  ann_loss.backward()\n","  ann_optimizer.step()\n","\n","plt.figure(1)\n","xtrainloss=np.arange(len(ann_accuracy))\n","plt.plot(xtrainloss,ann_accuracy)\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Training Loss')\n","plt.title('Training Loss vs Iterations')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tz9DfXiGfScC","colab_type":"code","colab":{}},"source":["testcontext_vectors=torch.zeros(len(testlabels),2*hiddensize)\n","for tfile in range(len(testfiles)):\n","  f = open(testfiles[tfile],'r')\n","  lines=f.readlines()\n","  rc=(lines[0].strip()).split(\" \")\n","  \n","  arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","  for i in range(int(rc[1])):\n","    arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","  hs,cs = encode(arr)\n","  hd=hs[:,-1,:].reshape(512)\n","  cd=cs[:,-1,:].reshape(512)\n","  \n","  beta=torch.zeros(hs.size(1))\n","  for i in range(hs.size(1)):\n","    beta[i]=css(hs[0,i].reshape(512),hd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  hct=torch.zeros(hiddensize)\n","  for i in range(hs.size(1)):\n","    hct+=alpha[i]*hs[:,i,:].reshape(hiddensize)\n","\n","  beta=torch.zeros(cs.size(1))\n","  for i in range(cs.size(1)):\n","    beta[i]=css(cs[0,i].reshape(512),cd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  cct=torch.zeros(hiddensize)\n","  for i in range(cs.size(1)):\n","    cct+=alpha[i]*cs[:,i,:].reshape(512)\n","\n","  testcontext_vectors[tfile,:hiddensize]=hct.detach().reshape(hiddensize)\n","  testcontext_vectors[tfile,hiddensize:]=cct.detach().reshape(hiddensize)\n","\n","prediction=ann(testcontext_vectors)\n","_, predicted = torch.max(prediction.data, 1)\n","accuracy=((predicted == testlabels).sum().item()*100/len(testlabels))\n","print(accuracy)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WSfAvXtEfSHR","colab_type":"code","colab":{}},"source":["i=1\n","input=testcontext_vectors\n","hues=[folders[int(i)] for i in testlabels] \n","plt.figure(1)\n","fig,ax = plt.subplots(1,5,figsize=(25,5))\n","for a in ann.ann.children():\n","  output=a(input).detach()\n","  if(i%2==1):\n","    poutput= TSNE(n_components=2).fit_transform(output)\n","    ax=plt.subplot(1,5,int(i/2)+1)\n","    sns.scatterplot(poutput[:,0], poutput[:,1], hue=hues, legend='full',palette=['red','blue','green','yellow','pink','black','orange','brown','dodgerblue','violet','cyan'])\n","    plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","    plt.minorticks_on()\n","    plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","    title=\"t-SNE plot of Layer \"+str(int(i/2)+1)\n","    plt.title(title)\n","  input=output\n","  i+=1\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZUp1ornBgSLA","colab_type":"code","colab":{}},"source":["class ANN2(nn.Module):\n","  def __init__(self):\n","    super(ANN2, self).__init__()\n","    self.ann=nn.Sequential(nn.Linear(1024,256),\n","                           nn.ReLU(), \n","                           nn.Linear(256,11))\n","\n","  def forward(self,x):\n","    out=self.ann(x)\n","    return out.reshape(len(x),len(folders))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wsen6ESIgnNO","colab_type":"code","colab":{}},"source":["LearningRate=0.003\n","epochs=200\n","ann = ANN2()\n","ann_optimizer = torch.optim.Adam(ann.parameters(), lr=LearningRate)\n","ann_criterion = nn.CrossEntropyLoss()\n","ann_trainingloss_list = []\n","ann_accuracy = []\n","for epoch in range(epochs):\n","  prediction=ann(context_vectors)\n","  ann_loss=ann_criterion(prediction,randlabels)\n","  _, predicted = torch.max(prediction.data, 1)\n","  ann_accuracy.append((predicted == randlabels).sum().item()*100/len(randlabels))\n","  ann_trainingloss_list.append(loss.item())\n","  ann_optimizer.zero_grad()\n","  ann_loss.backward()\n","  ann_optimizer.step()\n","\n","plt.figure(1)\n","xtrainloss=np.arange(len(ann_accuracy))\n","plt.plot(xtrainloss,ann_accuracy)\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Training Loss')\n","plt.title('Training Loss vs Iterations')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CuZErokygtp7","colab_type":"code","colab":{}},"source":["testcontext_vectors=torch.zeros(len(testlabels),2*hiddensize)\n","for tfile in range(len(testfiles)):\n","  f = open(testfiles[tfile],'r')\n","  lines=f.readlines()\n","  rc=(lines[0].strip()).split(\" \")\n","  \n","  arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","  for i in range(int(rc[1])):\n","    arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","  hs,cs = encode(arr)\n","  hd=hs[:,-1,:].reshape(512)\n","  cd=cs[:,-1,:].reshape(512)\n","  \n","  beta=torch.zeros(hs.size(1))\n","  for i in range(hs.size(1)):\n","    beta[i]=css(hs[0,i].reshape(512),hd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  hct=torch.zeros(hiddensize)\n","  for i in range(hs.size(1)):\n","    hct+=alpha[i]*hs[:,i,:].reshape(hiddensize)\n","\n","  beta=torch.zeros(cs.size(1))\n","  for i in range(cs.size(1)):\n","    beta[i]=css(cs[0,i].reshape(512),cd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  cct=torch.zeros(hiddensize)\n","  for i in range(cs.size(1)):\n","    cct+=alpha[i]*cs[:,i,:].reshape(512)\n","\n","  testcontext_vectors[tfile,:hiddensize]=hct.detach().reshape(hiddensize)\n","  testcontext_vectors[tfile,hiddensize:]=cct.detach().reshape(hiddensize)\n","\n","prediction=ann(testcontext_vectors)\n","_, predicted = torch.max(prediction.data, 1)\n","accuracy=((predicted == testlabels).sum().item()*100/len(testlabels))\n","print(accuracy)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OPpfK7v2gyAh","colab_type":"code","colab":{}},"source":["i=1\n","input=testcontext_vectors\n","hues=[folders[int(i)] for i in testlabels] \n","plt.figure(1)\n","fig,ax = plt.subplots(1,5,figsize=(25,5))\n","for a in ann.ann.children():\n","  output=a(input).detach()\n","  if(i%2==1):\n","    poutput= TSNE(n_components=2).fit_transform(output)\n","    ax=plt.subplot(1,5,int(i/2)+1)\n","    sns.scatterplot(poutput[:,0], poutput[:,1], hue=hues, legend='full',palette=['red','blue','green','yellow','pink','black','orange','brown','dodgerblue','violet','cyan'])\n","    plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","    plt.minorticks_on()\n","    plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","    title=\"t-SNE plot of Layer \"+str(int(i/2)+1)\n","    plt.title(title)\n","  input=output\n","  i+=1\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GCOuwMvrg21H","colab_type":"code","colab":{}},"source":["class ANN1(nn.Module):\n","  def __init__(self):\n","    super(ANN1, self).__init__()\n","    self.ann=nn.Sequential(nn.Linear(1024,11))\n","\n","  def forward(self,x):\n","    out=self.ann(x)\n","    return out.reshape(len(x),len(folders))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0xurQ8VbhdMW","colab_type":"code","colab":{}},"source":["LearningRate=0.003\n","epochs=200\n","ann = ANN1()\n","ann_optimizer = torch.optim.Adam(ann.parameters(), lr=LearningRate)\n","ann_criterion = nn.CrossEntropyLoss()\n","ann_trainingloss_list = []\n","ann_accuracy = []\n","for epoch in range(epochs):\n","  prediction=ann(context_vectors)\n","  ann_loss=ann_criterion(prediction,randlabels)\n","  _, predicted = torch.max(prediction.data, 1)\n","  ann_accuracy.append((predicted == randlabels).sum().item()*100/len(randlabels))\n","  ann_trainingloss_list.append(loss.item())\n","  ann_optimizer.zero_grad()\n","  ann_loss.backward()\n","  ann_optimizer.step()\n","\n","plt.figure(1)\n","xtrainloss=np.arange(len(ann_accuracy))\n","plt.plot(xtrainloss,ann_accuracy)\n","plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","plt.minorticks_on()\n","plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","plt.xlabel('Iterations')\n","plt.ylabel('Training Loss')\n","plt.title('Training Loss vs Iterations')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lNIdO7dXhiEa","colab_type":"code","colab":{}},"source":["testcontext_vectors=torch.zeros(len(testlabels),2*hiddensize)\n","for tfile in range(len(testfiles)):\n","  f = open(testfiles[tfile],'r')\n","  lines=f.readlines()\n","  rc=(lines[0].strip()).split(\" \")\n","  \n","  arr=torch.zeros(1,int(rc[1]),int(rc[0]))\n","  for i in range(int(rc[1])):\n","    arr[0,i]=torch.FloatTensor(list(map(float,((lines[i+1].strip()).split(\" \")))))\n","  hs,cs = encode(arr)\n","  hd=hs[:,-1,:].reshape(512)\n","  cd=cs[:,-1,:].reshape(512)\n","  \n","  beta=torch.zeros(hs.size(1))\n","  for i in range(hs.size(1)):\n","    beta[i]=css(hs[0,i].reshape(512),hd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  hct=torch.zeros(hiddensize)\n","  for i in range(hs.size(1)):\n","    hct+=alpha[i]*hs[:,i,:].reshape(hiddensize)\n","\n","  beta=torch.zeros(cs.size(1))\n","  for i in range(cs.size(1)):\n","    beta[i]=css(cs[0,i].reshape(512),cd)\n","  alpha=torch.exp(beta)/sum(torch.exp(beta))\n","  cct=torch.zeros(hiddensize)\n","  for i in range(cs.size(1)):\n","    cct+=alpha[i]*cs[:,i,:].reshape(512)\n","\n","  testcontext_vectors[tfile,:hiddensize]=hct.detach().reshape(hiddensize)\n","  testcontext_vectors[tfile,hiddensize:]=cct.detach().reshape(hiddensize)\n","\n","prediction=ann(testcontext_vectors)\n","_, predicted = torch.max(prediction.data, 1)\n","accuracy=((predicted == testlabels).sum().item()*100/len(testlabels))\n","print(accuracy)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tOhwCfpDhjek","colab_type":"code","colab":{}},"source":["i=1\n","input=testcontext_vectors\n","for a in ann.ann.children():\n","  output=a(input).detach()\n","  if(i%2==1):\n","    poutput= TSNE(n_components=2).fit_transform(output)\n","    plt.figure(int(i/2)+1)\n","    sns.scatterplot(poutput[:,0], poutput[:,1], hue=hues, legend='full',palette=['red','blue','green','yellow','pink','black','orange','brown','dodgerblue','violet','cyan'])\n","    plt.grid(b=True, which='major', color='#666666', linestyle='-')\n","    plt.minorticks_on()\n","    plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n","    title=\"t-SNE plot of Layer \"+str(int(i/2)+1)\n","    plt.title(title)\n","    plt.show()\n","  input=output\n","  i+=1"],"execution_count":null,"outputs":[]}]}